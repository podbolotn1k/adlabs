import urllib.request 
import pandas as pd
import os
from datetime import datetime

def download_vhi_data(province_id, start_year=1981, end_year=2024):
    url = f"https://www.star.nesdis.noaa.gov/smcd/emb/vci/VH/get_TS_admin.php?country=UKR&provinceID={province_id}&year1={start_year}&year2={end_year}&type=Mean"
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f'vhi_id_{province_id}_{timestamp}.csv'
    if os.path.exists(filename):
        print(f"–§–∞–π–ª –¥–ª—è –æ–±–ª–∞—Å—Ç—ñ {province_id} –≤–∂–µ —ñ—Å–Ω—É—î: {filename}. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.")
        return
    
    try:
        vhi_url = urllib.request.urlopen(url)
        with open(filename, 'wb') as out:
            out.write(vhi_url.read())
        print(f"VHI –¥–∞—Ç–∞ –¥–ª—è –æ–±–ª–∞—Å—Ç—ñ {province_id} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ —ñ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —è–∫ {filename}")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –¥–ª—è –æ–±–ª–∞—Å—Ç—ñ {province_id}: {e}")

for province_id in range(1, 26):  
    download_vhi_data(province_id)

def read_vhi_data(directory):
    data_frames = []
    for filename in os.listdir(directory):
        if filename.startswith('vhi_id_') and filename.endswith('.csv'):
            filepath = os.path.join(directory, filename)
            try:
                province_id = int(filename.split('_')[2])
            except (IndexError, ValueError) as e:
                print(f"–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —ñ–º–µ–Ω—ñ —Ñ–∞–π–ª—É: {filename}. –í–∏–¥–∞–ª—è—î–º–æ —Ü–µ–π —Ñ–∞–π–ª.")
                os.remove(filepath) 
                continue
            df = pd.read_csv(filepath, index_col=False, header=1)
            df['provinceID'] = province_id  
            
            data_frames.append(df)    
    return pd.concat(data_frames, ignore_index=True)

data_directory = '.' 
vhi_data = read_vhi_data(data_directory)
vhi_data.columns = vhi_data.columns.str.strip().str.replace('<br>', '', regex=True)
vhi_data['year'] = vhi_data['year'].astype(str).str.extract(r'(\d+)')
vhi_data = vhi_data.dropna(subset=['year']).copy() 
vhi_data['year'] = vhi_data['year'].astype(int) 
print("–°—Ç–æ–≤–ø—Ü—ñ —É —Ñ—Ä–µ–π–º—ñ:")
print(vhi_data.columns)

# –°–ª–æ–≤–Ω–∏–∫
province_mapping = {
    1: "–í—ñ–Ω–Ω–∏—Ü—å–∫–∞", 2: "–í–æ–ª–∏–Ω—Å—å–∫–∞", 3: "–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞", 4: "–î–æ–Ω–µ—Ü—å–∫–∞",
    5: "–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞", 6: "–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞", 7: "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞", 8: "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞",
    9: "–ö–∏—ó–≤—Å—å–∫–∞", 10: "–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞", 11: "–õ—É–≥–∞–Ω—Å—å–∫–∞", 12: "–õ—å–≤—ñ–≤—Å—å–∫–∞",
    13: "–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞", 14: "–û–¥–µ—Å—å–∫–∞", 15: "–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞", 16: "–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞",
    17: "–°—É–º—Å—å–∫–∞", 18: "–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞", 19: "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞", 20: "–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞",
    21: "–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞", 22: "–ß–µ—Ä–∫–∞—Å—å–∫–∞", 23: "–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞", 24: "–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞",
    25: "–†–µ—Å–ø—É–±–ª—ñ–∫–∞ –ö—Ä–∏–º"
}

def replace_province_indices(df, mapping):
    if 'provinceID' in df.columns:
        df['province'] = df['provinceID'].map(mapping) 
    else:
        print("–ü–æ–º–∏–ª–∫–∞: —Å—Ç–æ–≤–ø–µ—Ü—å 'provinceID' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Ñ—Ä–µ–π–º—ñ –¥–∞–Ω–∏—Ö.")
    return df

vhi_data = replace_province_indices(vhi_data, province_mapping)

def analyze_vhi_data(df, province, year):
    province_data = df[(df['province'] == province) & (df['year'] == year)]
    if not province_data.empty:
        print("-"*70)
        print(f"–û–±–ª–∞—Å—Ç—å: {province}, –†—ñ–∫: {year}")
        print(f"–ú—ñ–Ω VHI: {province_data['VHI'].min()}, –ú–∞–∫—Å VHI: {province_data['VHI'].max()}, –°–µ—Ä–¥–Ω—î: {province_data['VHI'].mean()}, –ú–µ–¥—ñ–∞–Ω–∞ VHI: {province_data['VHI'].median()}")
        print("-"*70)
    else:
        print(f"–ù–µ–º–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –¥–ª—è {province}–æ–±–ª in {year}")

def user_input_for_analysis(df):
    print("–î–æ—Å—Ç—É–ø–Ω—ñ –æ–±–ª–∞—Å—Ç—ñ:")
    for idx, province in province_mapping.items():
        print(f"{idx}: {province}")
    
    province_id = int(input("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –æ–±–ª–∞—Å—Ç—ñ (1-25): "))
    year = int(input("–í–≤–µ–¥—ñ—Ç—å —Ä—ñ–∫: "))
    
    if province_id not in province_mapping:
        print("–ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä –æ–±–ª–∞—Å—Ç—ñ.")
        return
    
    province = province_mapping[province_id]
    analyze_vhi_data(df, province, year)

user_input_for_analysis(vhi_data)

def display_vhi_for_range(df):
    print("–î–æ—Å—Ç—É–ø–Ω—ñ –æ–±–ª–∞—Å—Ç—ñ:")
    for idx, province in province_mapping.items():
        print(f"{idx}: {province}")
    
    provinces_input = input("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä–∏ –æ–±–ª–∞—Å—Ç–µ–π —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 1,3,5): ")
    provinces_list = [int(x.strip()) for x in provinces_input.split(',')]
    
    start_year = int(input("–í–≤–µ–¥—ñ—Ç—å –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Ä—ñ–∫: "))
    end_year = int(input("–í–≤–µ–¥—ñ—Ç—å –∫—ñ–Ω—Ü–µ–≤–∏–π —Ä—ñ–∫: "))
    
    invalid_provinces = [p for p in provinces_list if p not in province_mapping]
    if invalid_provinces:
        print(f"–ù–µ–≤—ñ—Ä–Ω—ñ –æ–±–ª–∞—Å—Ç—ñ: {', '.join(map(str, invalid_provinces))}.")
        return
    
    filtered_data = df[(df['provinceID'].isin(provinces_list)) & 
                        (df['year'].between(start_year, end_year))]

    year_difference = end_year - start_year
    row_limit = 52 + (year_difference * 52)
    
    if not filtered_data.empty:
        print("-"*70)
        for province_id in provinces_list:
            province_name = province_mapping[province_id]
            print(f"–†—è–¥ VHI –¥–ª—è –æ–±–ª–∞—Å—Ç—ñ {province_name} –∑ {start_year} –ø–æ {end_year}:")
            province_data = filtered_data[filtered_data['provinceID'] == province_id]
            province_data_limited = province_data.head(row_limit)
            print(province_data_limited[['year', 'VHI']].to_string(index=False))
            print("-"*70)
    else:
        print(f"–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤–∫–∞–∑–∞–Ω–∏—Ö –æ–±–ª–∞—Å—Ç–µ–π –∞–±–æ —Ä–æ–∫—ñ–≤.")

display_vhi_for_range(vhi_data)
def find_extreme_droughts_user_input(df, mapping):
    print("\n –ê–Ω–∞–ª—ñ–∑ –µ–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∏—Ö –ø–æ—Å—É—Ö –≤ –£–∫—Ä–∞—ó–Ω—ñ ")
    print("=" * 70)
    try:
        percent_threshold = float(input("–í–≤–µ–¥—ñ—Ç—å –≤—ñ–¥—Å–æ—Ç–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –µ–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∏—Ö –ø–æ—Å—É—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 20): ").replace(',', '.'))
        if percent_threshold <= 0 or percent_threshold > 100:
            print("\n –í—ñ–¥—Å–æ—Ç–æ–∫ –º–∞—î –±—É—Ç–∏ –≤ –º–µ–∂–∞—Ö –≤—ñ–¥ 1 –¥–æ 100.\n")
            return
    except ValueError:
        print("\n –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.\n")
        return

    total_regions = 25
    threshold_regions = max(1, int(total_regions * percent_threshold / 100)) 
    print(f"\n –®—É–∫–∞—î–º–æ —Ä–æ–∫–∏, –∫–æ–ª–∏ –±—ñ–ª—å—à–µ {percent_threshold:.1f}% –æ–±–ª–∞—Å—Ç–µ–π (—Ç–æ–±—Ç–æ {threshold_regions}+) –ø–æ—Å—Ç—Ä–∞–∂–¥–∞–ª–∏ –≤—ñ–¥ –ø–æ—Å—É—Ö–∏ (VHI < 15)...")
    print("=" * 70)

    drought_years = []
    for year in sorted(df['year'].unique()):
        year_data = df[df['year'] == year]
        drought_regions = year_data[year_data['VHI'] < 15]['provinceID'].unique()

        if len(drought_regions) >= threshold_regions:
            affected_regions = [mapping[r] for r in drought_regions if r in mapping]
            drought_years.append({
                'year': year,
                'affected_count': len(drought_regions),
                'regions': affected_regions
            })

    if drought_years:
        print(f"\n–ó–Ω–∞–π–¥–µ–Ω–æ {len(drought_years)} —Ä—ñ–∫(—ñ–≤) –∑ –µ–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∏–º–∏ –ø–æ—Å—É—Ö–∞–º–∏!\n")
        for record in drought_years:
            print(f"üìÖ –†—ñ–∫: {record['year']} | üåç –£—Ä–∞–∂–µ–Ω–æ –æ–±–ª–∞—Å—Ç–µ–π: {record['affected_count']}")
            print("üìç –û–±–ª–∞—Å—Ç—ñ: " + ', '.join(record['regions']))
            print("-" * 70)
    else:
        print("\n‚ùó –ü–æ—Å—É—Ö–∏, —â–æ —É—Ä–∞–∑–∏–ª–∏ –±—ñ–ª—å—à–µ –∑–∞–∑–Ω–∞—á–µ–Ω–æ–≥–æ –≤—ñ–¥—Å–æ—Ç–∫–∞ –æ–±–ª–∞—Å—Ç–µ–π, –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

find_extreme_droughts_user_input(vhi_data, province_mapping)


