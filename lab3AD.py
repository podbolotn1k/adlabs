import os 
import pandas as pd
import glob
import streamlit as st
import matplotlib.pyplot as plt

st.set_page_config(
    page_title="VHI Data Analysis", 
    page_icon=":chart_with_upwards_trend:", 
    layout="wide"
)

st.markdown("""
<style>
.main {
    background-color: #f0f2f6;
}
.stApp {
    max-width: 1200px;
    margin: 0 auto;
}
.stTitle {
    color: #2c3e50;
    text-align: center;
    font-size: 2.5em;
    margin-bottom: 20px;
}
.stHeader {
    color: #34495e;
    background-color: #ecf0f1;
    padding: 10px;
    border-radius: 10px;
}
.stTabs [data-baseweb="tab-list"] {
    background-color: #e0e6f0;
    border-radius: 10px;
    padding: 5px;
}
.stTabs [data-baseweb="tab"] {
    transition: all 0.3s ease;
    border-radius: 8px;
}
.stTabs [aria-selected="true"] {
    background-color: #3498db;
    color: white !important;
}
</style>
""", unsafe_allow_html=True)

DATA_DIR = "csvfiles"
os.makedirs(DATA_DIR, exist_ok=True)

allreg = {
    1: "–í—ñ–Ω–Ω–∏—Ü—å–∫–∞", 2: "–í–æ–ª–∏–Ω—Å—å–∫–∞", 3: "–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞", 4: "–î–æ–Ω–µ—Ü—å–∫–∞",
    5: "–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞", 6: "–ó–∞–∫–∞—Ä–ø–∞—Ç—Å—å–∫–∞", 7: "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞", 8: "–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞",
    9: "–ö–∏—ó–≤—Å—å–∫–∞", 10: "–ö—ñ—Ä–æ–≤–æ–≥—Ä–∞–¥—Å—å–∫–∞", 11: "–õ—É–≥–∞–Ω—Å—å–∫–∞", 12: "–õ—å–≤—ñ–≤—Å—å–∫–∞",
    13: "–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞", 14: "–û–¥–µ—Å—å–∫–∞", 15: "–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞", 16: "–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞",
    17: "–°—É–º—Å—å–∫–∞", 18: "–¢–µ—Ä–Ω–æ–ø—ñ–ª—å—Å—å–∫–∞", 19: "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞", 20: "–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞",
    21: "–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞", 22: "–ß–µ—Ä–∫–∞—Å—å–∫–∞", 23: "–ß–µ—Ä–Ω—ñ–≤–µ—Ü—å–∫–∞", 24: "–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞",
    25: "–†–µ—Å–ø—É–±–ª—ñ–∫–∞ –ö—Ä–∏–º"
}

def read_vhi_data(directory):
    data_frames = []
    if not os.path.exists(directory):
        st.error(f"–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è {directory} –Ω–µ —ñ—Å–Ω—É—î!")
        return pd.DataFrame()
    
    for filename in os.listdir(directory):
        if filename.startswith('vhi_id_') and filename.endswith('.csv'):
            filepath = os.path.join(directory, filename)
            try:
                province_id = int(filename.split('_')[2].split('.')[0])  
                df = pd.read_csv(filepath, index_col=False, header=1, delimiter=',')
                df['provinceID'] = province_id  
                data_frames.append(df)
            except (IndexError, ValueError) as e:
                print(f"–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —ñ–º–µ–Ω—ñ —Ñ–∞–π–ª—É: {filename}. –ü–æ–º–∏–ª–∫–∞: {e}")
                continue
            except pd.errors.EmptyDataError:
                print(f"–§–∞–π–ª {filename} –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –º–∞—î –Ω–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç.")
                continue
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–∞–π–ª—É {filename}: {e}")
                continue
    
    if not data_frames:
        print("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª—É –¥–ª—è –æ–±—Ä–æ–±–∫–∏.")
        return pd.DataFrame()
    
    try:
        df_combined = pd.concat(data_frames, ignore_index=True)
        df_combined.columns = [col.lower().strip().replace('<br>', '') for col in df_combined.columns]
        
        return df_combined
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±'—î–¥–Ω–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö: {e}")
        return pd.DataFrame()

def read_data_to_dataframe(directory):
    df = read_vhi_data(directory)
    
    if df.empty:
        return pd.DataFrame()
    
    if 'year' in df.columns:
        df['year'] = df['year'].astype(str).str.extract(r'(\d+)')
        df = df.dropna(subset=['year']).copy() 
        df['year'] = df['year'].astype(int)
    else:
        print("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: —Å—Ç–æ–≤–ø–µ—Ü—å 'year' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    if 'week' in df.columns:
        df['week'] = df['week'].astype(int)
    
    if 'provinceid' in df.columns:
        df = replace_province_indices(df, allreg)
    else:
        print("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: —Å—Ç–æ–≤–ø–µ—Ü—å 'provinceID' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    return df

def replace_province_indices(df, mapping):
    df['province'] = df['provinceid'].map(mapping)
    return df

def main():
    st.markdown('<h1 class="stTitle">üåç –ê–Ω–∞–ª—ñ–∑ –í–µ–≥–µ—Ç–∞—Ü—ñ–π–Ω–æ–≥–æ –ó–¥–æ—Ä–æ–≤\'—è –†–µ–≥—ñ–æ–Ω—ñ–≤</h1>', unsafe_allow_html=True)
    
    df = read_data_to_dataframe(DATA_DIR)  

    if df.empty:
        st.error("–î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ:")
        st.error("- –ß–∏ –ø–∞–ø–∫–∞ 'data' –º—ñ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ 'vhi_id_XX.csv'?")
        st.error("- –ß–∏ –º–∞—é—Ç—å —Ñ–∞–π–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö?")
        return
    
    if 'provinceid' not in df.columns:
        st.error("–£ –¥–∞–Ω–∏—Ö –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —Å—Ç–æ–≤–ø–µ—Ü—å 'provinceID'. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤—Ö—ñ–¥–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤.")
        return
    
    filter, graf = st.columns([1, 6])
    
    with filter:
        st.markdown('<h2 class="stHeader">üîç –§—ñ–ª—å—Ç—Ä–∏</h2>', unsafe_allow_html=True)

        analysis_columns = [col for col in df.columns if col in ['vhi', 'vci', 'tci']]
        
        analysis_type = st.selectbox(
            "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∞–Ω–∞–ª—ñ–∑—É",
            analysis_columns,
            index=0,
            help="–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ–∫–∞–∑–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É: VHI (–í–µ–≥–µ—Ç–∞—Ü—ñ–π–Ω–∏–π –Ü–Ω–¥–µ–∫—Å –ó–¥–æ—Ä–æ–≤'—è), VCI (–í–µ–≥–µ—Ç–∞—Ü—ñ–π–Ω–∏–π –ö–æ–Ω–¥–∏—Ü—ñ–π–Ω–∏–π –Ü–Ω–¥–µ–∫—Å), –∞–±–æ TCI (–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–∏–π –ö–æ–Ω–¥–∏—Ü—ñ–π–Ω–∏–π –Ü–Ω–¥–µ–∫—Å)"
        )
    
        region_options = {k: v for k, v in allreg.items() if k in df['provinceid'].unique()}
        selected_region = st.selectbox(
            "–û–±–µ—Ä—ñ—Ç—å —Ä–µ–≥—ñ–æ–Ω",
            options=list(region_options.keys()),
            format_func=lambda x: region_options[x],
            help="–í–∏–±–µ—Ä—ñ—Ç—å –æ–±–ª–∞—Å—Ç—å –£–∫—Ä–∞—ó–Ω–∏ –¥–ª—è –¥–µ—Ç–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É"
        )
        
        min_week, max_week = st.slider(
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω —Ç–∏–∂–Ω—ñ–≤",
            min_value=int(df['week'].min()),
            max_value=int(df['week'].max()),
            value=(1, 52),
            help="–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–∂–Ω–µ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É"
        )
        
        min_year, max_year = st.slider(
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω —Ä–æ–∫—ñ–≤",
            min_value=int(df['year'].min()),
            max_value=int(df['year'].max()),
            value=(int(df['year'].min()), int(df['year'].max())),
            help="–í–∏–±–µ—Ä—ñ—Ç—å —á–∞—Å–æ–≤–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É"
        )

    filtered_df = df[
        (df['provinceid'] == selected_region) & 
        (df['week'] >= min_week) & (df['week'] <= max_week) & 
        (df['year'] >= min_year) & (df['year'] <= max_year)
    ].copy()
    
    with graf:
        tab1, tab2, tab3 = st.tabs(["üìä –¢–∞–±–ª–∏—Ü—è –¥–∞–Ω–∏—Ö", "üìà –ß–∞—Å–æ–≤–∏–π —Ä—è–¥", "üåê –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ä–µ–≥—ñ–æ–Ω—ñ–≤"])
        
        with tab1:
            st.subheader("–¢–∞–±–ª–∏—Ü—è –¥–∞–Ω–∏—Ö")

            sort_column = st.selectbox("–°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞:", filtered_df.columns, index=0)
            sort_order = st.radio("–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è:", ["–ó—Ä–æ—Å—Ç–∞–Ω–Ω—è", "–°–ø–∞–¥–∞–Ω–Ω—è"], horizontal=True)
            filtered_df = filtered_df.sort_values(by=sort_column, ascending=(sort_order == "–ó—Ä–æ—Å—Ç–∞–Ω–Ω—è"))
            st.dataframe(filtered_df, use_container_width=True)

        
        with tab2:
            if not filtered_df.empty:
                st.subheader(f"{analysis_type.upper()} –ø–æ —Ä–æ–∫–∞—Ö ({region_options[selected_region]})")
                
                plot_df = filtered_df.copy()
                plot_df['date'] = pd.to_datetime(plot_df['year'].astype(str) + '-W' + plot_df['week'].astype(str) + '-1', format='%Y-W%W-%w')
                
                plt.style.use('default') 
                fig, ax = plt.subplots(figsize=(12, 6))
                plt.plot(plot_df['date'], plot_df[analysis_type], label=analysis_type.upper(), color='#3498db', linewidth=2)
                plt.title(f"{analysis_type.upper()} –ø–æ —Ä–æ–∫–∞—Ö", fontsize=15, fontweight='bold')
                plt.xlabel("–î–∞—Ç–∞", fontsize=12)
                plt.ylabel(analysis_type.upper(), fontsize=12)
                plt.grid(True, linestyle='--', alpha=0.7)
                plt.legend()
                st.pyplot(fig)
            else:
                st.warning("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—É")
        
        with tab3:
            st.subheader(f"{analysis_type.upper()} —É —Ä—ñ–∑–Ω–∏—Ö —Ä–µ–≥—ñ–æ–Ω–∞—Ö")
            
            if 'province' in df.columns:
                compare_stats = df.groupby(['provinceid', 'province'])[analysis_type].mean().reset_index()
                
                plt.style.use('default')  
                fig, ax = plt.subplots(figsize=(12, 6))
                bars = plt.bar(compare_stats['province'], compare_stats[analysis_type], color='#2ecc71')
                plt.title(f"–°–µ—Ä–µ–¥–Ω—î {analysis_type.upper()} –ø–æ —Ä–µ–≥—ñ–æ–Ω–∞—Ö", fontsize=15, fontweight='bold')
                plt.xlabel("–†–µ–≥—ñ–æ–Ω", fontsize=12)
                plt.ylabel(f"–°–µ—Ä–µ–¥–Ω—î {analysis_type.upper()}", fontsize=12)
                plt.xticks(rotation=90)
                
                for bar in bars:
                    height = bar.get_height()
                    plt.text(bar.get_x() + bar.get_width()/2., height,
                             f'{height:.2f}', 
                             ha='center', va='bottom', fontsize=9)
                
                st.pyplot(fig)
            else:
                st.warning("–í—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ —Ä–µ–≥—ñ–æ–Ω–∏ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è")

if __name__ == "__main__":
    main()